/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

/**
 *
 * @author SteveWoerpel
 */
public class GUISimulator extends javax.swing.JFrame {

   /**
    * Creates new form GUISimulator
    */
   
   Simulation simulation = new Simulation();
   public GUISimulator() 
   { 
      initComponents();  
   }

   /**
    * This method is called from within the constructor to initialize the
    * form. WARNING: Do NOT modify this code. The content of this method
    * is always regenerated by the Form Editor.
    */
   @SuppressWarnings("unchecked")
   // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
   private void initComponents() {

      Arrive = new javax.swing.JButton();
      statistics = new javax.swing.JButton();
      increaseClock = new javax.swing.JButton();
      departure = new javax.swing.JButton();
      jLabel1 = new javax.swing.JLabel();
      jLabel2 = new javax.swing.JLabel();
      clockField = new javax.swing.JTextField();
      jLabel3 = new javax.swing.JLabel();
      beingServedField = new javax.swing.JTextField();
      waitingField = new javax.swing.JTextField();
      jLabel4 = new javax.swing.JLabel();
      jTextField4 = new javax.swing.JTextField();

      setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
      setTitle("Program 4 GUISimulator");
      setPreferredSize(new java.awt.Dimension(400, 400));

      Arrive.setFont(new java.awt.Font("Simplified Arabic Fixed", 0, 12)); // NOI18N
      Arrive.setLabel("Arrive");
      Arrive.addActionListener(new java.awt.event.ActionListener() {
         public void actionPerformed(java.awt.event.ActionEvent evt) {
            ArriveActionPerformed(evt);
         }
      });

      statistics.setFont(new java.awt.Font("Simplified Arabic Fixed", 0, 12)); // NOI18N
      statistics.setLabel("Statistics");
      statistics.addActionListener(new java.awt.event.ActionListener() {
         public void actionPerformed(java.awt.event.ActionEvent evt) {
            statisticsActionPerformed(evt);
         }
      });

      increaseClock.setFont(new java.awt.Font("Simplified Arabic Fixed", 0, 12)); // NOI18N
      increaseClock.setLabel("Clock +1");
      increaseClock.addActionListener(new java.awt.event.ActionListener() {
         public void actionPerformed(java.awt.event.ActionEvent evt) {
            increaseClockActionPerformed(evt);
         }
      });

      departure.setFont(new java.awt.Font("Simplified Arabic Fixed", 0, 12)); // NOI18N
      departure.setLabel("Leave");
      departure.addActionListener(new java.awt.event.ActionListener() {
         public void actionPerformed(java.awt.event.ActionEvent evt) {
            departureActionPerformed(evt);
         }
      });

      jLabel1.setFont(new java.awt.Font("Simplified Arabic Fixed", 0, 14)); // NOI18N
      jLabel1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
      jLabel1.setText("Platteville Burger Waiting Line Simulation");

      jLabel2.setFont(new java.awt.Font("Simplified Arabic Fixed", 0, 12)); // NOI18N
      jLabel2.setText("Clock");

      clockField.setFont(new java.awt.Font("Simplified Arabic Fixed", 0, 12)); // NOI18N
      clockField.addActionListener(new java.awt.event.ActionListener() {
         public void actionPerformed(java.awt.event.ActionEvent evt) {
            clockFieldActionPerformed(evt);
         }
      });

      jLabel3.setText("Customer Being Served");

      beingServedField.setFont(new java.awt.Font("Simplified Arabic Fixed", 0, 12)); // NOI18N

      waitingField.setFont(new java.awt.Font("Simplified Arabic Fixed", 0, 12)); // NOI18N

      jLabel4.setText("Number of Customers Waiting");

      jTextField4.setFont(new java.awt.Font("Simplified Arabic Fixed", 0, 12)); // NOI18N
      jTextField4.setHorizontalAlignment(javax.swing.JTextField.LEFT);
      jTextField4.setText("chet");
      jTextField4.setAutoscrolls(false);
      jTextField4.setCaretPosition(1);
      jTextField4.setCursor(new java.awt.Cursor(java.awt.Cursor.NW_RESIZE_CURSOR));

      javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
      getContentPane().setLayout(layout);
      layout.setHorizontalGroup(
         layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
         .addGroup(layout.createSequentialGroup()
            .addContainerGap()
            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
               .addComponent(jTextField4)
               .addGroup(layout.createSequentialGroup()
                  .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                     .addComponent(jLabel2)
                     .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                           .addComponent(clockField, javax.swing.GroupLayout.Alignment.LEADING)
                           .addGroup(layout.createSequentialGroup()
                              .addComponent(Arrive)
                              .addGap(18, 18, 18)
                              .addComponent(departure)
                              .addGap(18, 18, 18)
                              .addComponent(increaseClock))
                           .addComponent(beingServedField, javax.swing.GroupLayout.Alignment.LEADING)
                           .addComponent(waitingField, javax.swing.GroupLayout.Alignment.LEADING))
                        .addGap(18, 18, 18)
                        .addComponent(statistics))
                     .addComponent(jLabel3)
                     .addComponent(jLabel4)
                     .addGroup(layout.createSequentialGroup()
                        .addGap(21, 21, 21)
                        .addComponent(jLabel1)))
                  .addGap(0, 0, Short.MAX_VALUE)))
            .addContainerGap())
      );
      layout.setVerticalGroup(
         layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
         .addGroup(layout.createSequentialGroup()
            .addGap(20, 20, 20)
            .addComponent(jLabel1)
            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
               .addComponent(Arrive)
               .addComponent(departure)
               .addComponent(increaseClock)
               .addComponent(statistics))
            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
            .addComponent(jLabel2)
            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
            .addComponent(clockField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
            .addComponent(jLabel3)
            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
            .addComponent(beingServedField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
            .addComponent(jLabel4)
            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
            .addComponent(waitingField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
            .addGap(18, 18, 18)
            .addComponent(jTextField4, javax.swing.GroupLayout.DEFAULT_SIZE, 146, Short.MAX_VALUE)
            .addContainerGap())
      );

      pack();
   }// </editor-fold>//GEN-END:initComponents

   private void ArriveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ArriveActionPerformed
      if(!simulation.newCustomer())
      {
         System.out.println("A customer couldn" + "'" 
                            + "t get in line @time " 
                            + simulation.getClock()
                            + " because the line was full.");
      }
      else
      {
         System.out.print("A customer has arrived @time " + simulation.getClock() + ". ");
         System.out.println(numCustomersToString());
      }
   }//GEN-LAST:event_ArriveActionPerformed

   private void departureActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_departureActionPerformed
      Customer temp = simulation.departure();
      if(temp == null)
      {
         System.out.println("Nobody is being served @time " + simulation.getClock() + ".");
      }
      else
      {
         System.out.print(temp.toString() + " finished @time " + simulation.getClock() + ". ");
         System.out.println(numCustomersToString());
      }   
   }//GEN-LAST:event_departureActionPerformed

   private void increaseClockActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_increaseClockActionPerformed
         simulation.increaseClock(1);
         clockField.setText("Current time is " + Integer.toString(simulation.getClock()));
         //System.out.println("Time updated by 1 units; current time is " + simulation.getClock() + ".");
   }//GEN-LAST:event_increaseClockActionPerformed

   private void statisticsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_statisticsActionPerformed
      int finished = simulation.getFinished();
      int totalWait = simulation.getTotalWait();
      int waited = simulation.getWaited();
      int noWait = simulation.getNoWait();
      if(totalWait > 0)
      {
         System.out.println("The average wait time for the customers who finished waiting: "
                            + ((float)totalWait / (waited)) + ".");
      }
      else
         System.out.println("The average wait time for the customers who finished waiting: 0.0.");
      System.out.println("The total wait time is " + totalWait + ".");
      System.out.println("The number of customers finished: " + finished + ".");
      System.out.println("The number of customers who did not have to wait: " + noWait + ".");
      System.out.println();      // TODO add your handling code here:
   }//GEN-LAST:event_statisticsActionPerformed

   private void clockFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_clockFieldActionPerformed
      
   }//GEN-LAST:event_clockFieldActionPerformed

   private String numCustomersToString()
   {
      return ("Number of customers waiting in the line: " + simulation.getCount());
   }
      
      
      
      
      
      
      
      
      
      
      
   /**
    * @param args the command line arguments
    */
   public static void main(String args[]) {
      /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
       * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
       */
      try {
         for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
            if ("Nimbus".equals(info.getName())) {
               javax.swing.UIManager.setLookAndFeel(info.getClassName());
               break;
            }
         }
      } catch (ClassNotFoundException ex) {
         java.util.logging.Logger.getLogger(GUISimulator.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
      } catch (InstantiationException ex) {
         java.util.logging.Logger.getLogger(GUISimulator.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
      } catch (IllegalAccessException ex) {
         java.util.logging.Logger.getLogger(GUISimulator.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
      } catch (javax.swing.UnsupportedLookAndFeelException ex) {
         java.util.logging.Logger.getLogger(GUISimulator.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
      }
        //</editor-fold>

      /* Create and display the form */
      java.awt.EventQueue.invokeLater(new Runnable() {
         public void run() {
            new GUISimulator().setVisible(true);
         }
      });
   }

   // Variables declaration - do not modify//GEN-BEGIN:variables
   private javax.swing.JButton Arrive;
   private javax.swing.JTextField beingServedField;
   private javax.swing.JTextField clockField;
   private javax.swing.JButton departure;
   private javax.swing.JButton increaseClock;
   private javax.swing.JLabel jLabel1;
   private javax.swing.JLabel jLabel2;
   private javax.swing.JLabel jLabel3;
   private javax.swing.JLabel jLabel4;
   private javax.swing.JTextField jTextField4;
   private javax.swing.JButton statistics;
   private javax.swing.JTextField waitingField;
   // End of variables declaration//GEN-END:variables
}
